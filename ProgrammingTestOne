CREATE TABLE Customer (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);


CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATE NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE
);

INSERT INTO Customer (customer_id, name, email) VALUES 
(1, 'Alice', 'alice@example.com'),
(2, 'Bob', 'bob@example.com'),
(3, 'Charlie', 'charlie@example.com');

INSERT INTO Orders (order_id, order_date, total_amount, customer_id) VALUES
(101, '2024-09-01', 100.50, 1),
(102, '2024-09-02', 200.75, 1),
(103, '2024-09-03', 50.00, 2),
(104, '2024-09-04', 300.00, 3);



Explain how to set up a one-to-many relationship between Customer and Order using JPA annotations.
Using the Customer and Order tables, explain how to cascade operations (e.g., save or delete) from the Customer to Order. Provide code examples.
What happens if you try to delete a Customer who has placed orders? How can you enforce referential integrity using JPA to ensure that Orders linked to a Customer are handled properly?
Write a JPA method to update the total_amount of an Order inside a transaction. Demonstrate how you would handle a transaction rollback in case of an error.
Write a JPQL query to retrieve all orders for a given Customer with customer_id = 1.
Write a JPQL query to retrieve all Customer names along with the total number of Orders and the sum of total_amount for each Customer. Ensure that customers who have no orders are also included in the result.
